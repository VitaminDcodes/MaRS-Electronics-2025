//geometric messages testing on ROS2
//linear x: rover's pwm front and back
//angular z: spot turn position, rover's pwm while turning, reverse spot turn position
//spot turn and reverse spot turn position are controlled by time

#include <Arduino.h>
#include <micro_ros_platformio.h>
#include <rcl/rcl.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <geometry_msgs/msg/twist.h>

// // ROS2 Declaration
rcl_node_t node;
rcl_allocator_t allocator;
rclc_support_t support;
rclc_executor_t executor;

rcl_subscription_t subscriber; 
geometry_msgs_msg_Twist msg;


// Motor Driver Pins
#define dir_fl 26   // Front Left
#define pwm_fl 27
#define dir_fr 19   // Front Right
#define pwm_fr 18
#define dir_bl 25   // Back Left
#define pwm_bl 33
#define dir_br 32   // Back Right
#define pwm_br 4

//front left
#define dir_fls 16 
#define pwm_fls 17
#define dir_frs 21
#define pwm_frs 22
#define dir_bls 14
#define pwm_bls 23
#define dir_brs 13
#define pwm_brs 15

// Global control variables
int input_pwm = 0;
int input_pwm_1 = 30;
int pwm = 0;
int direction = 0;
int direction_1 = 0;
//int direction_2 = 0;
int present_angle = 0;
int current_angle = 0;
int target_angle = 0;
bool flag = 0;

//int present_angle = millis();

// Motor class
class motor {
  private:
    int dir_pin;
    int pwm_pin;
  public:
    motor(int pin1, int pin2);
    void clockwise();
    void anticlockwise();
    void pwm(int input_pwm);
};

motor::motor(int pin1, int pin2) {
    dir_pin = pin1;
    pwm_pin = pin2;
    pinMode(dir_pin, OUTPUT);
    pinMode(pwm_pin, OUTPUT);
}

void motor::clockwise() {
    digitalWrite(dir_pin, LOW);  // Verified experimentally
}

void motor::anticlockwise() {
    digitalWrite(dir_pin, HIGH);
}

void motor::pwm(int input_pwm) {
    analogWrite(pwm_pin, input_pwm);
}

// Instantiate motors
motor motorFL(dir_fl, pwm_fl);
motor motorFR(dir_fr, pwm_fr);
motor motorBR(dir_br, pwm_br);
motor motorBL(dir_bl, pwm_bl);

motor motorFLS(dir_fls, pwm_fls);
motor motorFRS(dir_frs, pwm_frs);
motor motorBRS(dir_brs, pwm_brs);
motor motorBLS(dir_bls, pwm_bls);

void spotturn()
{
   // int i = 0;
   //flag = 0;
  motorFRS.anticlockwise();
  motorBRS.anticlockwise();
  motorFLS.clockwise();//soldering opposite
  motorBLS.clockwise();

   // present_angle = millis();
  unsigned long start_time = millis();
  while (millis() - start_time < 5000)
  {
    motorFRS.pwm(input_pwm_1*2);
    motorBRS.pwm(input_pwm_1*2);
    motorFLS.pwm(input_pwm_1*2);
    motorBLS.pwm(input_pwm_1*2);
    delay(10);
   //target_angle++ ;
  }
  motorFRS.pwm(0);
  motorBRS.pwm(0);
  motorFLS.pwm(0);
  motorBLS.pwm(0);
  flag = 1;
}
void spotturnrev()
{
  motorFRS.clockwise();
  motorBRS.clockwise();
  motorFLS.anticlockwise();
  motorBLS.anticlockwise();

  //present_angle = millis();
  unsigned long start_time_1 = millis();
  while (millis() - start_time_1 < 5000)
  {
    motorFRS.pwm(input_pwm_1*2);
    motorBRS.pwm(input_pwm_1*2);
    motorFLS.pwm(input_pwm_1*2);
    motorBLS.pwm(input_pwm_1*2);
    delay(10);
  }
  motorFRS.pwm(0);
  motorBRS.pwm(0);
  motorFLS.pwm(0);
  motorBLS.pwm(0);
  flag = 0;
}
// Movement functions
void forward() {
    Serial.println("[CMD] FORWARD");
    motorFR.clockwise(); motorBR.clockwise();
    motorFL.anticlockwise(); motorBL.anticlockwise();
}

void backward() {
    Serial.println("[CMD] BACKWARD");
    motorFR.anticlockwise(); motorBR.anticlockwise();
    motorFL.clockwise(); motorBL.clockwise();
}

void spotleft() {
  // spotturn();
    Serial.println("[CMD] SPOT LEFT");
    motorFR.clockwise(); motorBR.clockwise();
    motorFL.clockwise(); motorBL.clockwise();
}

void spotright() {
    //spotturn();
    Serial.println("[CMD] SPOT RIGHT");
    motorFR.anticlockwise(); motorBR.anticlockwise();
    motorFL.anticlockwise(); motorBL.anticlockwise();
}

// ROS2 Callback: Choice
void choiceCallback(const void *msg) 
{
    const geometry_msgs_msgTwist *msg1 = (const geometry_msgsmsg_Twist *)msg;
    pwm = msg1->linear.x; // give positive pwm for forward and negative pwm for backward
    direction_1 = msg1->angular.z; // Give 0 for forward or backward , 1 for right and -1 for left
    // Serial.print("[ROS2] Choice received: ");
    // Serial.println(choice);
    input_pwm = abs(pwm);
    

    if (direction_1 > 0)
     direction = 1;
    else if (direction_1 < 0) 
    direction = -1;
    else 
    direction = 0;
   
    switch (direction) 
    {
        case 0: 
        {
        if(pwm > 0)
        {
            if(flag == 0)
            forward(); 

            else if(flag == 1)
            {
            spotturnrev();
            forward();
            }
        }
        else if(pwm < 0 )
        {
            if(flag == 0)
            backward(); 

           else if(flag == 1)
          {
           spotturnrev();
            backward(); 
          } 
        }
        else if(pwm == 0)
        input_pwm = 0;
        break;
        }
        case -1: 
        {
        if(flag == 0)
        {
         spotturn();
         spotleft();
        }
        else if(flag == 1)
        spotleft();
        break;
        }
        case 1: 
         {
        if(flag == 0)
        {
         spotturn();
         spotright();
        }
        else if(flag == 1)
        spotright();
         break;
        }    
      default:
      input_pwm = 0;
      break;
    }
   // direction_2 = direction;
    // Apply PWM
    motorFR.pwm(input_pwm);
    motorBR.pwm(input_pwm);
    motorFL.pwm(input_pwm);
    motorBL.pwm(input_pwm);
  
}

// // ROS2 Callback: PWM
// void pwmCallback(const void *msg_2) {
//     const std_msgs_msgInt16 *msg2 = (const std_msgsmsg_Int16*)msg_2;
//     choice_1 = msg2->data;
//     input_pwm = constrain(choice_1, 0, 255);

//     Serial.print("[ROS2] PWM received: ");
//     Serial.println(input_pwm);
// }

void setup() {
    Serial.begin(115200);
    delay(1000);

    set_microros_serial_transports(Serial);
    allocator = rcl_get_default_allocator();

    rclc_support_init(&support, 0, NULL, &allocator);
    rclc_node_init_default(&node, "driver", "", &support);

    rclc_subscription_init_default(
        &subscriber,
        &node,
        ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist),
        "cmd_vel"
    );

//     rclc_subscription_init_default(
//         &subscriber2,
//         &node,
//         ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int16),
//         "/rover/pwm"
//     );

    rclc_executor_init(&executor, &support.context, 2, &allocator);
    rclc_executor_add_subscription(&executor, &subscriber, &msg, &choiceCallback, ON_NEW_DATA);
//     rclc_executor_add_subscription(&executor, &subscriber2, &msg_2, &pwmCallback, ON_NEW_DATA);

//     Serial.println("[INIT] Setup complete.");
 }

void loop() 
{
    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
    vTaskDelay(pdMS_TO_TICKS(10));  // better than delay() in RTOS
}
